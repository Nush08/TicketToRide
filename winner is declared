//
//  dijstras with path.cpp
//  CPLEX 2
//
//  Created by Anushka Iyengar on 4/18/17.
//  Copyright Â© 2017 Anushka Iyengar. All rights reserved.
//

// A C / C++ program for Dijkstra's single source shortest
// path algorithm. The program is for adjacency matrix
// representation of the graph.
#include <stdio.h>
#include <limits.h>
#include <math.h>
# include<iostream>
using namespace std;

// Number of vertices in the graph
#define V 9

int path[V][V];
int pathI = 0;
int pathJ = 0;
int reward[V][V];
int src=0;

// A utility function to find the vertex with minimum distance
// value, from the set of vertices not yet included in shortest
// path tree
int minDistance(int dist[], bool sptSet[])
{
    // Initialize min value
    int min = INT_MAX, min_index;
    
    for (int v = 0; v < V; v++){
        if (sptSet[v] == false && dist[v] <= min){
            min = dist[v], min_index = v;
        }
    }
    return min_index;
}

//Function to say when sim done
bool eval(int a, int b){
  if (a=b){
    return false;
  }
  else{
    return true;
  }
}
//Function to find max of two values
double max(int a, int b){
  int maximum;
  if(a>b){
    maximum=a;
  }
  else{
    maximum=b;
  }
  return maximum;
}

// Function to print shortest path from source to j
// using parent array
void printPath(int parent[], int j)
{
    // Base Case : If j is source
    if (parent[j]==-1)
        return;
    
    printPath(parent, parent[j]);
    
    //printf("%d ", j);
    path[pathI][pathJ] = j;
    printf("path[%d][%d] = %d ", pathI, pathJ, path[pathI][pathJ]);
    pathJ++;
}

void printReward(int parent[], int j)
{
    // Base Case : If j is source
    if (parent[j]==-1)
        return;
    
    printReward(parent, parent[j]);
    
    // printf("%d ", j);
    reward[pathI][pathJ] = j;
    printf("reward[%d][%d] = %d ", pathI, pathJ, reward[pathI][pathJ]);
    pathJ++;
}

// A utility function to print the constructed distance
// array
int printSolution(int dist[],int nodeReward[], int n, int parent[])
{
    pathI=0;
    printf("Vertex\t  Distance\tPath");
    for (int i = 0; i < V; i++)
    {
        pathI++;
        pathJ = 0;
        
        printf("\n%d -> %d \t\t %d\t\t%d ", src, i, dist[i], src);
        path[pathI][pathJ] = 0;

        printf("path[%d][%d] = %d ", pathI, pathJ, path[pathI][pathJ]);
        //printf("path[%d][%d] = %d ", pathI, pathJ, reward[pathI][pathJ]);
        pathJ++;
        printPath(parent, i);
    }
    pathI=0;
    printf("\n Vertex\t  Reward\tPath");
    for (int i = 0; i < V; i++)
    {
        pathI++;
        pathJ = 0;
        
        printf("\n%d -> %d \t\t %d\t\t%d ", src, i, nodeReward[i], src);
        
        reward[pathI][pathJ] = 0;

       // printf("path[%d][%d] = %d ", pathI, pathJ, path[pathI][pathJ]);
        printf("reward[%d][%d] = %d ", pathI, pathJ, reward[pathI][pathJ]);
         pathJ++;
        printReward(parent, i);
    }
    //Prints whole path
    /**for (int k = 0; k < V; k++) {
        for (int p = 0; p < V; p++) {
            // if (path[k][p] != 0)
            printf("path[%d][%d] = %d ", k, p, path[k][p]);
        }
        printf("\n");
    }
    */
    return 0;
    
}

// Funtion that implements Dijkstra's single source shortest path
// algorithm for a graph represented using adjacency matrix
// representation
void dijkstra(int graph[V][V],int cost[V][V])
{
    int dist[V];  // The output array. dist[i] will hold
    // the shortest distance from src to i
    int nodeReward[V];
    
    // sptSet[i] will true if vertex i is included / in shortest
    // path tree or shortest distance from src to i is finalized
    bool sptSet[V];
    
    // Parent array to store shortest path tree
    int parent[V];
    
    // Initialize all distances as INFINITE and stpSet[] as false
    for (int i = 0; i < V; i++)
    {
        parent[src] = -1;
        dist[i] = INT_MAX;
        sptSet[i] = false;
    }
    
    // Distance of source vertex from itself is always 0
    dist[src] = 0;
    nodeReward[src]=50;
    
    // Find shortest path for all vertices
    for (int count = 0; count < V-1; count++)
    {
        // Pick the minimum distance vertex from the set of
        // vertices not yet processed. u is always equal to src
        // in first iteration.
        int u = minDistance(dist, sptSet);
        
        // Mark the picked vertex as processed
        sptSet[u] = true;
        
        // Update dist value of the adjacent vertices of the
        // picked vertex.
        for (int v = 0; v < V; v++)
            
            // Update dist[v] only if is not in sptSet, there is
            // an edge from u to v, and total weight of path from
            // src to v through u is smaller than current value of
            // dist[v]
            if (!sptSet[v] && graph[u][v] &&
                dist[u] + graph[u][v] < dist[v])
            {
                parent[v]  = u;
                dist[v] = dist[u] + graph[u][v];
                nodeReward[v]=nodeReward[u]+cost[u][v];            
            }
    }
    
    // print the constructed distance array
    printSolution(dist, nodeReward, V, parent);
}

// driver program to test above function
int main()
{
    /* Let us create the example graph discussed above */
    //adjacency matrix
    int graph[V][V] = {
        {0, 4, 0, 0, 0, 0, 0, 8, 0},
        {4, 0, 8, 0, 0, 0, 0, 11, 0},
        {0, 8, 0, 7, 0, 4, 0, 0, 2},
        {0, 0, 7, 0, 9, 14, 0, 0, 0},
        {0, 0, 0, 9, 0, 10, 0, 0, 0},
        {0, 0, 4, 0, 10, 0, 2, 0, 0},
        {0, 0, 0, 14, 0, 2, 0, 1, 6},
        {8, 11, 0, 0, 0, 0, 1, 0, 7},
        {0, 0, 2, 0, 0, 0, 6, 7, 0}
    };
    //reward matrix
    int cost[V][V] = {
        {0, 4, 0, 0, 0, 0, 0, 8, 0},
        {4, 0, 8, 0, 0, 0, 0, 11, 0},
        {0, 8, 0, 7, 0, 4, 0, 0, 2},
        {0, 0, 7, 0, 9, 14, 0, 0, 0},
        {0, 0, 0, 9, 0, 10, 0, 0, 0},
        {0, 0, 4, 0, 10, 0, 2, 0, 0},
        {0, 0, 0, 14, 0, 2, 0, 1, 6},
        {8, 11, 0, 0, 0, 0, 1, 0, 7},
        {0, 0, 2, 0, 0, 0, 6, 7, 0}
    };
    dijkstra(graph,cost);
    //cout << path[1][1]<<"\n";
    double M[V];
    double Q[V][V];
    
    //Value function take 1
    /**
     for (int i=0;i<V;i++){
        for (int j=0;j<V;j++){
            Q[i][j]=cost[i][j]+(pow (.9, size[j]))*M[j];
            cout <<"the value of being in state "<<i<<"and going to "<<j<<" is "<<Q[i][j]<<"\n";
        }
        for (int j=0;j<V;j++){
            M[i]=max(M[i],Q[i][j]);
        }
        cout <<"for i="<<i<<" the value is "<<M[i]<<"\n";
    }
    */
     /**for (int i=0;i<V;i++){
       for (int j=0;j<V;j++){
            M[i]=max(M[i],Q[i][j]);
        }
        cout <<"for i="<<i<<" the value is "<<M[i]<<"\n";
     }
     */
     //Simulation
     int T=8;
     bool youwin=false;
     bool opwin=false;
     int Value[T+1];
     Value[0]=0;
     int OpValue[T+1];
     OpValue[0]=0;
     int startNode=5;
     int endNode=src;
    int size[V] ={};
     int OpstartNode=3;
     int OpendNode=src;
      int Opsize[V] ={};
      
     cout<<"You start at "<<startNode<<" and your Opponent starts at "<<OpstartNode<<" both aiming for "<<src<<"\n";
      
     for (int t=0;t<T;t++){
       cout<<"T="<<t<<"\n";
       //if((t=0){
       //  cout<<"You start with "<<Value[t]<<"-"<<OpValue[t]<<"\n";
       //}
        if((opwin==true)){
          cout <<"You Lose"<<"\n";
          cout <<"complete:"<<youwin<<" Opcomplete:"<<opwin<<"\n";
        }
        else{
         //your turn
             dijkstra(graph,cost);
             for (int i=0;i<V;i++){
              size[i]=0;
            }
            
            for (int i=0;i<V;i++){
            for(int j=1;j<V;j++){
            if (path[i+1][j] !=0 ){
              size[i]=size[i]+1;
            }
            else {
              size[i]=size[i];
            }
            }
            //cout << "The total plays from "<<i<<" to "<<src<<" is "<<size[i]<<"\n";
            }//end number of edges for loop
             
             //cout<<"\n size left to go"<<size[startNode]<<"\n";
             Value[t]=Value[t-1]+reward[startNode+1][size[startNode]-1];
             //update matrix
             graph[startNode][path[startNode+1][size[startNode]-1]]=0;
             graph[path[startNode+1][size[startNode]-1]][startNode]=0;
             cost[startNode][path[startNode+1][size[startNode]-1]]=0;
             cost[path[startNode+1][size[startNode]-1]][startNode]=0;
             //output move
             cout <<" You go from "<<startNode<<" to "<<path[startNode+1][size[startNode]-1]<<" with reward "<<Value[t]<<"\n";
             cout<<graph[5][6]<<" and "<<graph[6][5];
             startNode=path[startNode+1][size[startNode]-1];
              youwin=eval(endNode,startNode);
              if((youwin==true)){
                cout <<"You Win!"<<"\n";
                cout <<"complete:"<<youwin<<" Opcomplete:"<<opwin<<"\n";
              }
              else{
              //opponent turn
              dijkstra(graph,cost);
              for (int i=0;i<V;i++){
                Opsize[i]=0;
              }
              for (int i=0;i<V;i++){
              for(int j=1;j<V;j++){
              if (path[i+1][j] !=0 ){
                Opsize[i]=Opsize[i]+1;
              }
              else{
                Opsize[i]=size[i];
              }
              }
              //cout << "The total plays from "<<i<<" to "<<src<<" is "<<size[i]<<"\n";
              }//end number of edges for loop
               
               //cout<<"\n size left to go"<<Opsize[OpstartNode]<<"\n";
               OpValue[t]=OpValue[t-1]+reward[OpstartNode+1][Opsize[OpstartNode]-1];
               //update matrix
               graph[OpstartNode][path[OpstartNode+1][Opsize[OpstartNode]-1]]=0;
               graph[path[OpstartNode+1][Opsize[OpstartNode]-1]][OpstartNode]=0;
               cost[OpstartNode][path[OpstartNode+1][Opsize[OpstartNode]-1]]=0;
               cost[path[OpstartNode+1][Opsize[OpstartNode]-1]][OpstartNode]=0;
               //output move
               cout <<" Your Op goes from "<<OpstartNode<<" to "<<path[OpstartNode+1][Opsize[OpstartNode]-1]<<" with total reward "<<Value[t]<<"\n";
               OpstartNode=path[OpstartNode+1][Opsize[OpstartNode]-1];
               cout<<OpstartNode<<"\n";
               opwin=eval(OpendNode,OpstartNode);
            //cout <<"complete:"<<complete<<" Opcomplete:"<<Opcomplete<<"\n";
          
         }
     }
    
    //return 0;
     }
}
