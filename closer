//  Created by Anushka Iyengar on 4/18/17.
//  Copyright Â© 2017 Anushka Iyengar. All rights reserved.
//
#include <stdio.h>
#include <limits.h>
#include <math.h>
# include<iostream>
using namespace std;

// Number of vertices in the graph
#define V 9
//Constant initialized variables
const int D=45;//# of left s1
const int E=45;//# of distance s2 max distance is 45 since you can only place 45 trains
const int A=6; //#of actions s3
const int src=8; //reward node
int dist[V];

//Value of having D trains left, being E distance from reward, the number of trains youve placed, the number of trains your opponents plaed, your current node, if the ticket is complet and what action you take
double Q[D][E];
double Temp[D][E][A];

//max value function of actions
int max6(double a,double b,double c,double d,double e,double f){
    int maximum;
    int maximumab=0;
    int maximumcd=0;
    int maximumef=0;
    
    //compare a and b
    if (a>b){
        maximumab=0;
    }
    else {
        maximumab=1;
    }
    //compare c and d
    if (c>d){
        maximumcd=2;
    }
    else{
        maximumcd=3;
    }
    //compare e and f
    if (e>f){
        maximumef=4;
    }
    else{
        maximumef=5;
    }
    //compare max of ab and cd
    if (maximumab>maximumcd){
        maximum=maximumab;
    }
    else{
        maximum=maximumcd;
    }
    
    //find max of all
    if (maximum>maximumef){
        maximum=maximum;
    }
    else{
        maximum=maximumef;
    }
    
    //max action
    return maximum;
}

//Minimum Distance Function
int minDistance(int dist[], bool sptSet[])
{
    // Initialize min value
    int min = INT_MAX;
    int min_index=0;
    for (int v = 0; v < V; v++){
        if (sptSet[v] == false && dist[v] <= min){
            min = dist[v], min_index = v;
        }
    }
    return min_index;
}


//Dijkstra Function
void dijkstra(int graph[V][V])
{
    // sptSet[i] will true if vertex i is included / in shortest
    // path tree or shortest distance from src to i is finalized
    bool sptSet[V];
    
    // Parent array to store shortest path tree
    int parent[V];
    
    // Initialize all distances as INFINITE and stpSet[] as false
    for (int i = 0; i < V; i++)
    {
        parent[src] = -1;
        dist[i] = INT_MAX;
        sptSet[i] = false;
    }
    
    // Distance of source vertex from itself is always 0
    dist[src] = 0;
    
    // Find shortest path for all vertices
    for (int count = 0; count < V-1; count++)
    {
        // Pick the minimum distance vertex from the set of
        // vertices not yet processed. u is always equal to src
        // in first iteration.
        int u = minDistance(dist, sptSet);
        
        // Mark the picked vertex as processed
        sptSet[u] = true;
        
        // Update dist value of the adjacent vertices of the
        // picked vertex.
        for (int v = 0; v < V; v++)
            
            // Update dist[v] only if is not in sptSet, there is
            // an edge from u to v, and total weight of path from
            // src to v through u is smaller than current value of
            // dist[v]
            if (!sptSet[v] && graph[u][v] &&
                dist[u] + graph[u][v] < dist[v])
            {
                parent[v]  = u;
                dist[v] = dist[u] + graph[u][v];
            }
    }
}//end dijkstra function

//Main Function
int main(){
    
    
    //initalize function
    
    double w1=1;
    double w2=1;
    double w3=1;
    double S1;
    double S2;
    double S3;
    double total;
    double alpha;
    alpha=0.01;
    double gamma;
    gamma=0.25;
    
    int reward[6];
    reward[0]=1;
    reward[1]=2;
    reward[2]=2;
    reward[3]=4;
    reward[4]=10;
    reward[5]=15;
    
    for (int iteration=1;iteration<2;iteration++){
        int graph[V][V] = {
            {0, 4, 0, 0, 0, 0, 0, 2, 0},
            {4, 0, 2, 0, 0, 0, 0, 1, 0},
            {0, 2, 0, 3, 0, 4, 0, 0, 1},
            {0, 0, 3, 0, 2, 4, 0, 0, 0},
            {0, 0, 0, 2, 0, 5, 0, 0, 0},
            {0, 0, 4, 0, 5, 0, 2, 0, 0},
            {0, 0, 0, 4, 0, 2, 0, 6, 5},
            {2, 1, 0, 0, 0, 0, 6, 0, 3},
            {0, 0, 1, 0, 0, 0, 5, 3, 0}
        }; //end graph
        
        int moves[V][A]={
            {0,	0,	8,	0,	2,	0},
            {0,	8,	3,	0,	1,	0},
            {0,	9,	2,	4,	6,	0},
            {0,	0,	5,	3,	6,	0},
            {0,	0,	4,	0,	0,	6},
            {0,	0,	7,	0,	3,	5},
            {8,	0,	6,	0,	4,	9},
            {7,	2,	1,	9,	0,	0},
            {0,	3,	0,	8,	0,	7},
        };

        
        //Initialize Values
        for (int s1=0;s1<45;s1++){
            cout<<"\n ITERATION:"<<s1<<"\n";
            
            for(int s2=0;s2<E;s2++){
                //cout<<"s1:"<<s1<<"\n";
                //if ((s2=0)){
                
                //}
                //else{S2=(1.0/s2)*w2;
                //}
                //cout<<"S2 is"<<S2<<"\n";
                for(int s3=0;s3<A;s3++){
                                    //cout<<"s1:"<<s1<<"\n";
                                    
                                    S1=s1*5;
                                    //cout<<"s1:"<<S1<<"s1:"<<s2<<"s1:"<<s3<<"s1:"<<s4<<"s1:"<<s5<<"s1:"<<s6<<"\n";
                                    S2=(1.0/(s2+1));
                                    S3=reward[s3];
                                    total=S1*w1+S2*w2+S3*w3;
                                    //cout<<"Total:"<<total<<"\n";
                                    Temp[s1][s2][s3]=total;
                                    //Q[s1][s2][s3][s4][s5][s6]=1;
                                    
                                }
                                //find max value of each state and set that as the value
                                Q[s1][s2]=Temp[s1][s2][0];
                                for(int s3=0;s3<A;s3++){
                                    if(Q[s1][s2]<Temp[s1][s2][s3]){
                                        Q[s1][s2]=Temp[s1][s2][s3];
                                    }
                                    else{
                                        Q[s1][s2]=Q[s1][s2];
                                    }
                                }
                                //cout <<Q[s1][s2]<<"-";
                                
                
                            
            
            }//end s2
            
            cout<<"\n ITERATION:"<<s1<<"\n";
        }//end s1
        //cout<<"\n ITERATION:"<<s1<<"\n";
        //cout<<Q[0][2][2][2][3][0][2]<<"\n";
        //cout<<Q[0][2][2][2][3][1][2]<<"\n";
        
        cout<<"Hello World\n";
        
        //Updating
        int optA[V];
        double Value[V][A];
        double difference;
        int startNode=4;
        int trainsLeft=45;
        dijkstra(graph);
        int nextNode;
        int optNextNode[V];
        int totalValue=0;
        double expQ;
        double newQ;
        
        int opStartNode=rand()%8;
        int opNextNode;
        int opAction;
        int opScore=0;
        int opPlaced=0;
        int s1, s2, s3;
        
        //Calculate distance to reward node aka src
        for(int i=0;i<V;i++){
            //cout<<"\ni:"<<i<<" distance:"<<dist[i]<<"\n";
        }
        
        int rewardNode=8;
        
        for (int t=0;t<10;t++){
            /**if (startNode<0){
             cout<<"The value is "<<Q[trainsLeft-a][dist[startNode-a]][45-trainsLeft-a-1][0][startNode-a][1][a];
             }*/
            //cout<<"We are at node:"<<startNode<<"\n";
            cout<<"w1:"<<w1<<" w2:"<<w2<<" w3:"<<w3<<"\n";
            //Value of having D trains left, being E distance from reward, the number of trains youve placed, the number of trains your opponents plaed, your current node, if the ticket is complet and what action you take
            //find max approximate value of future state
            for (int a=0;a<A;a++){
                nextNode=moves[startNode][a];
                //find approximate value of being in future state for every action
                if ((graph[startNode][nextNode]=0)){
                    Value[startNode][a]=-10;
                }
                else{
                    if((nextNode)==rewardNode){
                        Value[startNode][a]=a+1+Q[trainsLeft-a-1][dist[nextNode]];
                    }
                    else{
                        Value[startNode][a]=a+1+Q[trainsLeft-a-1][dist[nextNode]];
                        
                    }
                }
            }
            optA[startNode]=max6(Value[startNode][0],Value[startNode][1],Value[startNode][2],Value[startNode][3],Value[startNode][4],Value[startNode][5]);
            optNextNode[startNode]=moves[startNode][optA[startNode]];
            cout<<"We are at node:"<<startNode<<" and go to:"<<optNextNode[startNode]<<" with action:"<<optA[startNode]<<"\n";
            
            expQ=Q[trainsLeft][dist[startNode]];
            
            //update coefficients
            s1=(trainsLeft-optA[startNode]-1); //number of trains left
            s2=(dist[optNextNode[startNode]]); //distance to reward node
            s3=(optA[startNode]); //number of trains youve placed
            cout<<"s1:"<<s1<<"s2:"<<s2<<"optAction"<<s3<<"\n";
            S1=s1*5;
            //cout<<"s1:"<<S1<<"s1:"<<s2<<"s1:"<<s3<<"s1:"<<s4<<"s1:"<<s5<<"s1:"<<s6<<"\n";
            S2=(1.0/(s2+1));
            S3=reward[s3];
            total=S1*w1+S2*w2;
            Q[s1][s2]=total;
            newQ=Q[s1][s2];//Q after taking action a
            
            //reward+alpha*Q(s',a')-Q(s,a)
            difference=(reward[s3]+gamma*newQ)-expQ;
            cout<<"The difference is"<<difference<<" from:"<<(reward[s3]+gamma*newQ)<<" and:"<<expQ<<"\n";
           
             w1=w1+alpha*difference*S1;
             w2=w2+alpha*difference*S2;
             w3=w3+alpha*difference*S3;
            
             
            totalValue=totalValue+reward[optA[startNode]];
            trainsLeft=trainsLeft-(optA[startNode]-1);
            
            //update graphs
            graph[startNode][optNextNode[startNode]]=0;
            graph[optNextNode[startNode]][startNode]=0;
            moves[startNode][optA[startNode]]=0;
            moves[optA[startNode]][startNode]=0;
            startNode=optNextNode[startNode];
            /**
             //update values
            for (int s1=0;s1<45;s1++){
                //cout<<"\n ITERATION:"<<s1<<"\n";
                
                for(int s2=0;s2<E;s2++){
                    //cout<<"s1:"<<s1<<"\n";
                    
                    for(int s3=0;s3<A;s3++){
                        //cout<<"s1:"<<s1<<"\n";
                        
                        S1=s1*w1;
                        //cout<<"s1:"<<S1<<"s1:"<<s2<<"s1:"<<s3<<"s1:"<<s4<<"s1:"<<s5<<"s1:"<<s6<<"\n";
                        S2=(1.0/(s2+1))*w2;
                        S3=reward[s3]*w3;
                        total=S1+S2+S3;
                        //cout<<"Total:"<<total<<"\n";
                        Temp[s1][s2][s3]=total;
                        //Q[s1][s2][s3][s4][s5][s6]=1;
                        
                    }
                    //find max value of each state and set that as the value
                    Q[s1][s2]=Temp[s1][s2][0];
                    for(int s3=0;s3<A;s3++){
                        if(Q[s1][s2]<Temp[s1][s2][s3]){
                            Q[s1][s2]=Temp[s1][s2][s3];
                        }
                        else{
                            Q[s1][s2]=Q[s1][s2];
                        }
                    }
                    //cout <<Q[s1][s2]<<"-";
                    
                    
                    
                    
                }//end s2
                
                //cout<<"\n ITERATION:"<<s1<<"\n";
            }//end s1
           */
            /**
            //Opponent
            opAction=rand()%5;
            opNextNode=moves[opStartNode][opAction];
            if ((graph[opStartNode][opNextNode]=0)){
                cout<<"Opponent does move"<<"\n";
                opStartNode=opStartNode;
            }
            else{
                graph[opStartNode][opNextNode]=0;
                graph[opStartNode][opNextNode]=0;
                moves[startNode][opAction]=0;
                moves[opAction][startNode]=0;
                cout<<"Opponent goes from:"<<opStartNode<<" to:"<<opNextNode<<"\n";
                opStartNode=opNextNode;
                opScore=opScore+reward[opAction];
                opPlaced=opPlaced+opAction;
            }
             */
            
        }
             
        cout <<"Total Score: YOU:"<<totalValue<<" Opponent:"<<opScore<<"\n";
        cout <<"iteration:"<<iteration<<"\n";
    }//iteration for loop
    
}//end main
